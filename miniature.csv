IssueTitle,IssueDescription,Label,PrTitle,PrDescription
"Improve heading spacing on Markdown preview","The spacing on markdown preview has headings (h2,h3) in the middle between text, but they should be spaced less with the content underneath so it looks like a section. Right now the spacing looks even with the content below and above.\r\n\r\nHere is an example (using grey matter theme):\r\n<img width=""676"" alt=""markdown-preview"" src=""https://user-images.githubusercontent.com/936006/87095255-50561f80-c238-11ea-8bcf-c4c2f023c3c1.png"">\r\n\r\nI've adjusted on photoshop what it should look like:\r\n<img width=""676"" alt=""markdown-preview (1)"" src=""https://user-images.githubusercontent.com/936006/87095426-a034e680-c238-11ea-9897-b661e828630d.png"">\r\n\r\nIt's only slight but the bottom one brings the heading down slightly so its more together.\r\nI looked into doing this but i could only find https://github.com/microsoft/vscode/blob/06f85af581281a3f45783329d375ecc7694930b4/extensions/markdown-language-features/media/markdown.css\r\n\r\n@mjbvz","help wanted,insiders-released,markdown,verification-needed","fix styling to improve heading spacing fixes #102036","This PR fixes #102036\r\n\r\n- So the first issue is that most elements have a margin-top and margin-bottom.\r\nIt made sense to remove the margin-top and let top elements push others down. (otherwise you fall into margin-collapse hell)\r\n- This means the body needs a padding on the top so that any first element has a gap (and not just the H1)\r\n- Headings have a smaller bottom margin so as to look more like a section\r\n- If 2 paragraphs are next to each other, the second paragraph reduces its top margin to bring them closer together.\r\n\r\n## Before\r\n![image](https://user-images.githubusercontent.com/936006/87351758-ce286c80-c551-11ea-80e5-13af706cd8ac.png)\r\n\r\n\r\n## After\r\n![image](https://user-images.githubusercontent.com/936006/87352076-5d358480-c552-11ea-9fa0-c5fcf3861712.png)\r\n\r\npings @mjbvz \r\n\r\n\r\n"
"Double pasting in a webview with latest insiders","<!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version:Version: 1.47.0-insider (user setup)\r\nCommit: d5e9aa0227e057a60c82568bf31c04730dc15dcd\r\nDate: 2020-07-08T10:52:52.439Z\r\nElectron: 7.3.2\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.19041\r\n\r\nSteps to Reproduce:\r\n\r\n1. Download the vscode extension samples: (https://github.com/microsoft/vscode-extension-samples.git)\r\n1. Modify the html in the cat coding webview sample to have a ```<textarea>```\r\n1. Run the cat coding webview\r\n1. Paste some text into the text area.\r\n\r\nIt will double paste. Double cut seems to happen too. \r\n\r\nRoot cause seems to be this commit id:\r\nhttps://github.com/microsoft/vscode/commit/85402615934f3c8b97ad14d8c483383833287a82 as found by @dimitry-ishenko\r\n\r\nThis is causing these two issues in the python extension:\r\nhttps://github.com/microsoft/vscode-python/issues/11796\r\nhttps://github.com/microsoft/vscode-python/issues/12808\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: NA\r\n","bug,candidate,custom-editors,insiders-released,linux,verified,windows","Fix double paste in webviews (1.47 recovery)","Ports f37faf6c84b204565ab9e447efd477e10fe6a837 to the 1.47 recovery\r\n\r\nFixes #101946\r\n\r\nThis change already shipped with 1.48. It is the more conservative fix for #101946"
"Uninstall hook not executing","<!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n<!-- Also please test using the latest insiders build to make sure your issue has not already been fixed: https://code.visualstudio.com/insiders/ -->\r\n\r\n<!-- Use Help > Report Issue to prefill these. -->\r\n- VSCode Version: 1.46.0\r\n- OS Version: Windows 10/macOS Catalina 10.15.4\r\n\r\nVS Code 1.46 no longer executes the [uninstall hook](https://code.visualstudio.com/api/references/extension-manifest#extension-uninstall-hook)\r\n\r\n[test-0.0.1.zip](https://github.com/microsoft/vscode/files/4788592/test-0.0.1.zip)\r\n\r\nAttached test extension (rename file extension to .vsix) which creates a file on uninstall in the user's home directory. \r\nUsing VS Code 1.45.1 the file is created on both Windows and macOS.\r\nUsing VS Code 1.46 no file is created.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install attached extension\r\n2. Uninstall extension\r\n3. Quit VS Code\r\n4. Start VS Code again\r\n5. No file is created\r\n\r\n<!-- Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: This is an extension management problem\r\n","bug,candidate,extensions,verified","Fix - Await until uninstall hook is finished before removing extension","This PR fixes #100323\r\n\r\nFix - Await until uninstall hook is finished before removing extension\r\n"
"[PowerToys Run] Searching feels really slow","Whenever I start writing for an application name, after two or three characters, it kind of freezes for split second, and then autocomplete feels not smooth as well. And I am sure it is not my laptop that causes that, as it is quite powerful + the performance is the same on windows idle and with full load from 5-6 applications consuming more than 7gb ram.\r\n\r\nIn comparison, [Wox](https://github.com/Wox-launcher/Wox) is instant, it has no lag whatsoever during typing.\r\n\r\nSpecs:\r\nCPU: i5-10210u\r\nRam: 8GB\r\nOS: Windiws 10 version 2004 build 19041.329\r\nw/ ssd","Product-Launcher,Triage-Needed","Improving UI performance","<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->\r\n## Summary of the Pull Request\r\nReduce work on UI thread and improve list view performance.\r\n\r\n<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> \r\n## References\r\n1. https://stackoverflow.com/questions/7687000/fast-performing-and-thread-safe-observable-collection/7687108#7687108\r\n\r\n<!-- Please review the items on the PR checklist before submitting-->\r\n## PR Checklist\r\n* [x] Applies to #4918 \r\n* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/PowerToys) and sign the CLA\r\n* [x] Tests added/passed\r\n\r\n<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->\r\n## Detailed Description of the Pull Request / Additional comments\r\nThe following optimizations are made in this PR to reduce work on UI thread : \r\n1. Modified `ResultCollection` data structure to support the bulk adding of results. This reduces the number of `NotifyCollectionChangedEventArgs` events argument to one per query from one per result item. \r\n2. Moved Result modification/adding/removing to a background thread. \r\n3. Reduced query delay timing to 20ms which seems to work a lot smoother now.\r\n\r\n<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->\r\n## Validation Steps Performed\r\nManually validated that all plugins work as expected."
"Color picker needs to cancel mouse click bubble through on selecting color","Right now if you click items like a toggle button, button, or a URL, it will actually have the click follow through.\r\n\r\nWe shouldn't have this type of bubble as an unintended click happens.","Issue-Bug,Product-Color Picker,Resolution-Fix-Committed","Prevent clicking through when selecting a color using color picker","<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->\r\n## Summary of the Pull Request\r\nLeft mouse click is not propagated to other controls when picking a color\r\n\r\n<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> \r\n## References\r\nfixes #5195\r\n\r\n<!-- Please review the items on the PR checklist before submitting-->\r\n## PR Checklist\r\n* [x] Applies to #5195 \r\n* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/PowerToys) and sign the CLA\r\n* [ ] Tests added/passed\r\n* [ ] Requires documentation to be updated\r\n* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx\r\n\r\n<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->\r\n## Validation Steps Performed\r\nManual testing"
"PowerRename does not work on NTFS reparse points","# Environment\r\n\r\n```\r\nWindows build number: 10.0.18362.449\r\nPowerToys version: 0.13.0\r\nPowerToy module for which you are reporting the bug (if applicable): PowerRename\r\n```\r\n\r\n# Steps to reproduce\r\n\r\nCreate reparse points, e.g. duplicate a folder with some files in OneDrive, right click the folder and choose ""Free up space"". OneDrive will change the local files to reparse points. Mark the files, right click them. The context menu does not show PowerRenamer (but it does show the standard ""Rename"" which works, albeit only for a single file, as usual).\r\n\r\n# Expected behavior\r\n\r\nPowerRenamer should show up in the context menu and work on the reparse point(s).\r\n\r\n# Actual behavior\r\n\r\nPowerRenamer does not show up (or work) with NTFS reparse points.\r\n\r\n# Screenshots\r\n\r\n![PowerRenamer_in_context_menu_of_local_file](https://user-images.githubusercontent.com/126681/68808368-7f909e80-0661-11ea-9bbf-427396eba31d.png)\r\n![PowerRenamer_missing_in_context_menu_of_NTFS_reparse_point](https://user-images.githubusercontent.com/126681/68808372-81f2f880-0661-11ea-99ca-e4342a443906.png)\r\n\r\n","Product-PowerRename,Resolution-Fix-Committed","Fix registration of PowerRename to work with OneDrive placeholders","This change adds a ContextMenuOptIn registry name which is required for shell context menu extensions to appear on the context menu for OneDrive placeholders. \r\n\r\nSee https://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/ne-shobjidl_core-default_folder_menu_restrictions.\r\n\r\nApplies to https://github.com/microsoft/PowerToys/issues/708"
"Some transport packages are pushed to nuget.org","Discussed this with @ViktorHofer, we think this shouldn't be happening:\r\n\r\n- https://www.nuget.org/packages/transport.Microsoft.NET.SDK.IL\r\n- https://www.nuget.org/packages/transport.Microsoft.NETCore.ILasm\r\n- https://www.nuget.org/packages/transport.Microsoft.NETCore.ILDAsm\r\n- https://www.nuget.org/packages/transport.Microsoft.NETCore.TestHost","area-ILTools-coreclr","Stop using transport packages for CoreCLR assets","All the uses of transport packages are fulfilled in some other way now: flow to upstream repositories is either done with other packages or gone with the runtime merge, and all symbols are indexed with symbol packages. \r\n\r\nFixes #38924"
"CMake version is broken on newer alpine container images","When trying to update the alpine container image the required cmake version isn't found on CoreClr builds. @akoeplinger thinks this is due to a general problem with alpine.\r\n\r\n```\r\nError relocating /usr/bin/cmake:\r\n_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev: symbol not found\r\n```\r\n\r\nMeanwhile we added another path to only use the new image on Mono. We should remove that extra path to be consistent with our used container images.\r\n\r\nWhen this is fixed, the #ifdef [here](https://github.com/dotnet/runtime/blob/5a948f14ad1c02edd4469321c137aa54913b5fc9/eng/pipelines/common/platform-matrix.yml#L90-L94) should be removed.\r\n\r\ncc @akoeplinger @safern ","area-Infrastructure-mono","Update to unified Alpine build image version","Update our Alpine build image so we can unify for a single image for our builds.\r\n\r\nFixes #2030"
"AssemblyLoadContext.Unload() not closing assembly file handle in .Net 5.0 Preview 6","### Description\r\n\r\nI'm currently testing the .Net 5.0 Preview 6 with some code that was written for .Net Core 3.1, specifically the AssemblyLoadContext's unloading capabilities.\r\nUnloading assemblies does seem to work in 5.0, but the runtime does not close the file handle - the same code works fine in .net core 3.1.5. A minimal example project can be found here: https://github.com/Xalcon/DotNet5AssemblyContextIssue\r\n\r\nThe solution can be build with `dotnet build`. This will create 2 folders, one for each framework inside `$(SolutionDir)/Out/Debug/`.\r\nThe binary `DotnetAssemblyUnloading.exe` will attempt to load the `PluginAssembly.dll` from the same directory and execute the EntryPont.Main() function in a new collectable `AssemblyLoadContext`. Afterwards it will unload the context and attempt to delete the `PluginAssembly.dll`. This fails with an `System.UnauthorizedAccessException` since the assembly is still opened by the runtime - even though the assembly context was collected.\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? **.NET 5.0.0-preview.6.20305.6**\r\n* What OS and version, and what distro if applicable? **Windows 10 Version 2004 (OS Build 19041.388)**\r\n* What is the architecture (x64, x86, ARM, ARM64)? **x64**\r\n* Do you know whether it is specific to that configuration? **I've not tested other systems or configurations.**\r\n\r\n### Regression?\r\n\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework?\r\n**The code is working perfectly fine on the .Net Core 3.1.5 runtime. Unloading closes the file handle, allowing the file to be deleted/replaced with a newer version.**\r\n\r\n","area-AssemblyLoader-coreclr","Fix releasing of file handle in binder tracing","`AssemblyBindOperation` was only releasing the file handle if binder tracing was on...\r\n\r\nFix #39609 \r\n\r\ncc @vitek-karas @janvorli \r\n\r\nNot sure if there's a good / reliable way to add a test for this."
"IDynamicInterfaceCastable interface","## Background and Motivation\r\n\r\nIn the .NET Native runtime support existed for a .NET class to participate in a C-style cast when that class didn't support the cast-to type. The COM [`QueryInterface()`](https://docs.microsoft.com/windows/win32/com/queryinterface--navigating-in-an-object) is an example where this kind of scenario exists. In COM, the instance is represented by an opaque `IUnknown` pointer and the only way to discover what is supported by the instance is to call `QueryInterface()` with a `GUID` representing the question of ""Does this instance support this type?"". The answer is typically a simple ""yes"" (`S_OK`) or ""no"" (`E_NOINTERFACE`). If the answer is ""yes"", a casted to instance of the type is returned, otherwise `null`. There are scenarios where the current instance may not have implemented this type but can provide an instance that does - this is called a tear-off.\r\n\r\nIn .NET, the metadata for a type is static and therefore if a type can't be cast to another type because it isn't in metadata that is correct. This means that a type has no reason to participate in the casting question. However, when implementing support for a COM scenario this rigidity isn't as beneficial since it may not be possible to know all the supported types on an instance. This proposal provides a way to let types provide an answer and an `object` instance that does satisfy the requested type eventhough the original instance does not and still adhere to the static metadata constraints of .NET.\r\n\r\nIn .NET Native there are two mechanisms to address this problem. The first, `ICastable` interface, proved to have usability issues. Usage of the `ICastable` API was error prone and had a potentially catastrophic consequence if used incorrectly - silent success or an unstable runtime. The [`ICastable` API][icastable_link] exists in the CoreCLR runtime but is not publicly exposed and exists only to support MCG scenarios.\r\n\r\nThe second approach was `CastableObject`. This approach didn't return a type but instead returned an actual `object` instance to dispatch on. The `CastableObject` type is an `abstract` type that contained some minor state for caching purposes. This approach did require inserting a new type into the user's type hierarchy. Updating the type hierarchy and the stored state of the `abstract` type made this solution more reliable, but less performant than `ICastable`.\r\n\r\nFor CoreCLR, the following proposal is based on lessons learned from .NET Native along with a recent C# language feature, [default interfaces](https://devblogs.microsoft.com/dotnet/default-implementations-in-interfaces/), that make a modified version of the `ICastable` approach easier to implement with confidence. The proposed interface followed by a usage example are described below.\r\n\r\n**Goals**\r\n\r\n- Support the [`ComWrappers` API]((https://github.com/dotnet/runtime/issues/1845)) in creating C# friendly wrappers for external `IUnknown` based objects.\r\n- Avoid having to call `QueryInterface()` for all possible supported types when an external `IUnknown` based object enters the runtime.\r\n- Support IL Linker scenarios.\r\n\r\n**Non-Goals**\r\n\r\n- Remove or alter current `ICastable` scenarios.\r\n\r\n## Proposed API\r\n\r\n```CSharp\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    /// <summary>\r\n    /// Interface used to participate in a type cast failure.\r\n    /// </summary>\r\n    public interface ICastableObject\r\n    {\r\n        /// <summary>\r\n        /// Called when an implementing class instance is cast to an interface type that\r\n        /// is not contained in the class's metadata.\r\n        /// </summary>\r\n        /// <param name=""interfaceType"">The interface type.</param>\r\n        /// <param name=""throwIfNotFound"">Indicates if the function should throw an exception rather than default(RuntimeTypeHandle).</param>\r\n        /// <returns>The type that should be used to dispatch for <paramref name=""interfaceType""/> on the current object.</returns>\r\n        /// <remarks>\r\n        /// This is called if casting this object to the given interface type would\r\n        /// otherwise fail. Casting here means the IL isinst and castclass instructions\r\n        /// in the case where they are given an interface type as the target type. This\r\n        /// function may also be called during interface dispatch.\r\n        ///\r\n        /// The returned type must be an interface type marked with the <see cref=""CastableObjectImplementationAttribute""/>, otherwise <see cref=""System. InvalidOperationException"" />\r\n        /// will be thrown. When the <paramref name=""throwIfNotFound"" /> is set to false,\r\n        /// a return value of default(RuntimeTypeHandle) is permitted. If <paramref name=""throwIfNotFound"" />\r\n        /// is true and default(RuntimeTypeHandle) is returned then <see cref=""System.InvalidCastException"" />\r\n        /// will be thrown unless an exception is thrown by the implementation.\r\n        /// </remarks>\r\n        RuntimeTypeHandle GetInterfaceImplementation(RuntimeTypeHandle interfaceType, bool throwIfNotFound);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Attribute required by any type that is returned by <see cref=""ICastableObject.GetInterfaceImplementation(RuntimeTypeHandle, bool)""/>.\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// This attribute is used to enforce policy in the runtime and make\r\n    /// <see cref=""ICastableObject"" /> scenarios linker friendly.\r\n    /// </remarks>\r\n    [AttributeUsage(AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]\r\n    public sealed class CastableObjectImplementationAttribute : Attribute\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n### Design notes\r\n\r\n- The default interface method itself will be called with a `this` pointer that by definition should implement the enclosing type (e.g. `IFooImpl`) as well as any implementing types (e.g. `IFoo`). We will need to define the exact semantics and requirements here.\r\n- Virtual Stub Dispatch (VSD) caching.\r\n    - `ICastableObject` could control casting on a per object basis, as we can easily call `GetInterfaceImplementation()` at each cast opportunity.\r\n    - `ICastableObject` would control the result of a dispatching on an interface at a per TYPE level. So, a given type could not use different default interface type (e.g. `IFooImpl`) for different instances. This would be sufficient for any plausible use of this feature for interop, but it might impact useablility for aspect oriented programming, etc. \r\n    - The end result is that a given object may or may not implement the interface, but if it does, all implementations must be the same.\r\n- By throwing an exception from the interface impl the debugger will report the exception as coming from that type. We should suggest to users of this API to utilize some debugger attributes to make everything look normal. \r\n\r\n## Usage Examples\r\n\r\nConsider the following interface and class.\r\n\r\n``` CSharp\r\n\r\ninterface IFoo\r\n{\r\n    int CallMe(int i);\r\n}\r\n\r\nclass Baz\r\n{\r\n    ...\r\n}\r\n\r\nclass Bar : ICastableObject\r\n{\r\n    ...\r\n\r\n    // Call when cast is performed on an instance of Bar but the type isn't in Bar's metadata.\r\n    RuntimeTypeHandle ICastableObject.GetInterfaceImplementation(RuntimeTypeHandle interfaceType, bool throwIfNotFound)\r\n    {\r\n        Debug.Assert(interfaceType.Value != IntPtr.Zero);\r\n\r\n        if (interfaceType == typeof(IFoo).TypeHandle)\r\n            return typeof(IFooImpl).TypeHandle;\r\n        \r\n        if (throwIfNotFound)\r\n        {\r\n            var typeName = Type.GetTypeFromHandle(interfaceType).FullName;\r\n            throw new InvalidCastException($""Don't support {typeName}"");\r\n        }\r\n\r\n        return default;\r\n    }\r\n\r\n    // An ""implemented"" interface instance that will handle ""this"" of type ""Bar"".\r\n    // Note that when this default interface implementation is called, the ""this"" will\r\n    // be typed as a ""IFooImpl"".\r\n    [CastableObjectImplementation]\r\n    public interface IFooImpl : IFoo\r\n    {\r\n        int IFoo.CallMe(int i)\r\n        {\r\n            // Perform desired action on the ""this"" pointer which will be of type Bar.\r\n            //  - Cast to some other type\r\n            //  - Unsafe.As<T>()\r\n            //  - Table look up\r\n            //  - etc.\r\n            ...\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe following is an example of usage.\r\n\r\n```CSharp\r\nBaz z = ...;\r\n\r\n// Will result in InvalidCastException being thrown.\r\nIFoo zf = (IFoo)z;\r\n\r\nBar b = ...;\r\n\r\n// However, since Bar implements ICastableObject, GetInterfaceImplementation will be called.\r\nIFoo bf = (IFoo)b;\r\n// bf is a Bar.IFooImpl with a Bar 'this'\r\n\r\n// Will call Bar.IFooImpl.CallMe()\r\nbf.CallMe(27);\r\n```\r\n\r\n## Community impact\r\n\r\n- Expose `ICastable` request: https://github.com/dotnet/runtime/issues/23727\r\n- How MCG supported COM: https://github.com/dotnet/runtime/issues/10572#issuecomment-400129044\r\n- Discussion for `ICastable`: https://github.com/dotnet/corert/issues/4219#issuecomment-623671255\r\n- Support in `ComWrappers` API: https://github.com/dotnet/runtime/issues/35929\r\n- Mono request: https://github.com/mono/mono/issues/9423\r\n\r\n<!-- Links -->\r\n[icastable_link]: https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/ICastable.cs\r\n","api-approved,area-System.Runtime.CompilerServices","Add IDynamicInterfaceCastable interface","Approved API: #36654\r\n\r\n- Add `IDynamicInterfaceCastable` and `DynamicInterfaceCastableImplementation`\r\n- `IDynamicInterfaceCastable.GetInterfaceImplementation` is called as a fallback for isinst, castclass, and interface dispatch when casting in the normal way fails.\r\n- Add tests\r\n\r\ncc @AaronRobinsonMSFT @jkoritzinsky "
"System.Text.Json: Ignore null values while serializing","## Background and Motivation\r\nRecently JsonIgnoreCondition have been changed to have WhenWritingDefault rather than WhenNull.\r\nSee:\r\n![image](https://user-images.githubusercontent.com/5130190/87240149-45a5b100-c417-11ea-8535-2b1ccdbfd61c.png)\r\n\r\nWhen serving JSON for frontends, then default values of value types are extremely important. It's not like null.\r\nYou could argue that undefined and null have ""similar"" semantic in Javascript, so not having the null field serialized makes sense. It will be undefined, and checks you would do against null such as ` if (!value)` will match the undefined behavior too.\r\nWhile for value types you don't expect that it can become undefined, so you'll end up with subtle bugs after deserialization.\r\n\r\nThat's why I believe that WhenWritingNull makes a lot of sense.\r\nJSON.NET has a similar feature, see: https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_NullValueHandling.htm\r\n\r\nRemarks:\r\n- I cannot think of deserialization usages that make sense, that's why I proposed WhenWritingNull.\r\n- Options.IgnoreNullValues is not a solution, since it recently became obsolete.\r\n\r\n## Proposed API\r\n\r\nWhenWritingNull is the new enum entry.\r\n\r\n```c#\r\npublic enum JsonIgnoreCondition\r\n    {\r\n        /// <summary>\r\n        /// Property is never ignored during serialization or deserialization.\r\n        /// </summary>\r\n        Never = 0,\r\n        /// <summary>\r\n        /// Property is always ignored during serialization and deserialization.\r\n        /// </summary>\r\n        Always = 1,\r\n        /// <summary>\r\n        /// If the value is the default, the property is ignored during serialization.\r\n        /// </summary>\r\n        WhenWritingDefault = 2,\r\n        /// <summary>\r\n        /// If the value is null, the property is ignored during serialization.\r\n        /// </summary>\r\n        WhenWritingNull = 3,\r\n    }\r\n```\r\nWhile working on a regression for https://github.com/dotnet/runtime/issues/38800 I wrote a PR that fixed both the regression and proposed the change, see here: https://github.com/dotnet/runtime/pull/38811.\r\nThat should have been separate PRs, so the PR got rejected, but you can see a baseline there.\r\n\r\n## Usage Examples\r\n\r\nIn global options:\r\n\r\n```c#\r\npublic class MyClass\r\n{\r\n    public int[] ReferenceType { get; set; }\r\n\r\n    public int ValueType { get; set; }\r\n}\r\n\r\n[Fact]\r\npublic static void Serialize_value_type_but_not_reference_type()\r\n{\r\n    var options = new JsonSerializerOptions\r\n    {\r\n        DefaultIgnoreCondition = JsonIgnoreCondition.WhenNull\r\n    };\r\n\r\n    string json = @""{""""ReferenceType"""":null, """"ValueType"""":18}"";\r\n\r\n    var obj = JsonSerializer.Deserialize<MyClass>(json, options);\r\n\r\n    // Deserialize\r\n    Assert.Null(obj.ReferenceType);\r\n    Assert.Equal(18, obj.ValueType);\r\n\r\n    // Deserialize\r\n    obj = new MyClass();\r\n    json = JsonSerializer.Serialize(obj, options);\r\n    Assert.Equal(@""{""""ValueType"""":0}"", json);\r\n}\r\n```\r\n\r\nOn top of properties:\r\n\r\n```c#\r\npublic class MyClass\r\n{\r\n    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]\r\n    public int[] ReferenceType { get; set; }\r\n\r\n    public int ValueType { get; set; }\r\n}\r\n\r\n[Fact]\r\npublic static void Serialize_value_type_but_not_reference_type()\r\n{\r\n    string json = @""{""""ReferenceType"""":null, """"ValueType"""":18}"";\r\n\r\n    var obj = JsonSerializer.Deserialize<MyClass>(json);\r\n\r\n    // Deserialize\r\n    Assert.Null(obj.ReferenceType);\r\n    Assert.Equal(18, obj.ValueType);\r\n\r\n    // Deserialize\r\n    obj = new MyClass();\r\n    json = JsonSerializer.Serialize(obj);\r\n    Assert.Equal(@""{""""ValueType"""":0}"", json);\r\n}\r\n```","api-approved,area-System.Text.Json","Add JsonIgnoreCondition.WhenWritingNull","Fixes https://github.com/dotnet/runtime/issues/39152"
"setup: implement an .exe autoupdate utility with dependency resolution","As a second part of #4214:\r\n- we need a custom utility which will download and install dotnet core if necessary before starting the msi installation\r\n- we should embed the PT msi installer in it, to handle the direct download from /releases page case\r\n- the utility should show an error with an instructions on where to get dotnet core if it failed to install it\r\n- it should be standalone and show installation/update status\r\n","Area-Setup/Install,Issue-Feature,Resolution-Fix-Committed","Autoupdate: implement updating bootstrapper utility","<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->\r\n## Summary of the Pull Request\r\n- implement bootstrapper utility which embeds .msi installer\r\n- refactor notification library\r\n- CI\r\n\r\n<!-- Please review the items on the PR checklist before submitting-->\r\n## PR Checklist\r\n* [x] Applies to #4983\r\n\r\n<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->\r\n## Detailed Description of the Pull Request / Additional comments\r\nSince we need to display toast notifications from the bootstrapper, and that requires it to have a shortcut, I've added dynamic icon creation functionality. However, Windows doesn't update its internal app list immediately, so we must sleep for 3s before showing the first notification. That will be fixed when we know how to register the app via registry (perhaps next Monday). Also, there's a known issue that we cannot determine if the bootstrapper was launched manually or during the update procedure, so for 0.20 the updating user will need to click through the msi dialogs. For later versions that's fixed by adding -silent flag during update.\r\n\r\n<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->\r\n## Validation Steps Performed\r\nPreparation\r\n- build my branch as v0.20 and publish it in my repo at\r\n- [build 0.19.2 (1a2cd2a) with my repo test path as an update endpoint](https://github.com/yuyoyuppe/attachments/releases/download/v0.22/Yuyoyuppe-PowerToysSetup-0.19.2-x64.msi)\r\n\r\n0.19.2 update via update now:\r\n0.19.2 update via update at next launch:\r\n0.19.2 elevated update via update now:\r\n0.19.2 update via check for updates:\r\n- works\r\n- PT is updated\r\n\r\n2) Launching the bootstrapper manually on a clean VM w/ no:\r\n- dotnet is installed\r\n- PT is installed\r\n"
"[launcher, tracker] Setting to always clear query on new launch","\r\n![vl9jLZAIRn_Trim-output](https://user-images.githubusercontent.com/65631993/82387225-1a749600-9a54-11ea-8e53-7f5a316b176d.gif)\r\nas you can see it goes to the same window i searched before . I am not very good at explaining i hope you can get what im trying to say","Help Wanted,Product-Launcher,Product-Settings,Resolution-Fix-Committed","[PowerToys Run] Implemented Setting to Clear Search Query when PowerToys Run is Launched","## Summary of the Pull Request\r\n\r\nThis pull requests adds an option in the setting which clears the previous Search Query when PowerToys Run is launched again.\r\n\r\n## References\r\n\r\n## PR Checklist\r\n* [x] Applies to #3237 \r\n* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/PowerToys) and sign the CLA\r\n* [x] Tests added/passed (Checked for ""Passed"", no new automatic tests added)\r\n* [?] Requires documentation to be updated \r\n* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nWhen a new setting is enabled via the settings, it will clear the searchquery which was previously entered when a new PowerToys Run session is started.\r\n\r\nImage showing the new setting i added.\r\n![ClearThePreviousQueryOnLaunch](https://user-images.githubusercontent.com/16852398/87457782-3e45f980-c609-11ea-9462-bbbfedf68ad6.png)\r\n\r\nGIF showing the new behavior (when enabled and running in Release mode)\r\n![HideOnLaunch3](https://user-images.githubusercontent.com/16852398/87470546-34c68c80-c61d-11ea-9c2d-aa39b79f2068.gif)\r\n\r\n## Validation Steps Performed\r\n\r\n- i enabled the new settings on the PowerToys Run tab in the settings tray\r\n- i pressed ALT-TAB to activate it, searched for ""Feedback Hub""\r\n- i pressed ALT-TAB again to dismiss PowerToys Run\r\n- i pressed ALT-TAB again \r\n- i expect there to be no search query input / search results.\r\n\r\nSame steps are executed when the setting has been disabled and the search query has not been affected."
"SourceControlInputBox.visible is only in vscode.proposed.d.ts","@joaomoreno my SCM extension has no use for the input box, so after creating its instance using scm.createSourceControl I want to set .inputBox.visible=false\r\n\r\nBut visible is only defined in vscode.proposed.d.ts so I get this error reported when I save my change:\r\n\r\n`Property 'visible' does not exist on type 'SourceControlInputBox'.`\r\n\r\nIt seems the property first got introduced by https://github.com/microsoft/vscode/pull/60051 but that caused a problem and had to be reverted on 24-Oct-2018 by https://github.com/microsoft/vscode/commit/fb1ed7927103006a8be8c42ea470126799b40ee6, which in turn was reverted later the same day by https://github.com/microsoft/vscode/commit/63da98253cf1c89e1e5e1691667072c8adf6a158\r\n\r\nIt passed testing on 30-Oct-2018 under #62068\r\n\r\nMore recently (4-Oct-2019) https://github.com/microsoft/vscode/pull/81982 (still open) has made use of the visible property despite still only being proposed. Perhaps it can do this because it's the built-in Git SCM rather than an extension.\r\n\r\nCan this API be finalized soon?\r\n\r\n\r\n","api-finalization","Finalize SourceControlInputBox.visible","There was actually no `proposed` runtime check here at all 😨 .\r\nFixes #90499\r\n"
"Status: focused entry should use orange border when using the high contrast theme","<!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\nTo be consistent with the rest of the workbench we should consider:\r\n- Use the orange borders for the active element instead of the blue one\r\n- Remove the background color as I do not see it being used anywhere else for the active element\r\n\r\n","accessibility,feature-request,help wanted,verification-needed,verified","Fixes focused status bar entry should use orange border when using the high contrast theme","<!-- Thank you for submitting a Pull Request. Please: \r\n* Read our Pull Request guidelines:\r\n  https://github.com/Microsoft/vscode/wiki/How-to-Contribute#pull-requests.\r\n* Associate an issue with the Pull Request.\r\n* Ensure that the code is up-to-date with the `master` branch.\r\n* Include a description of the proposed changes and how to test them. \r\n-->\r\n\r\nThis PR fixes #99350\r\n"